#!/usr/bin/env ruby
# coding: utf-8

require 'net/http'
require 'json'
require 'uri'
require 'find'
require 'erb'

base_url = 'https://eblocker.zendesk.com/api/v2/help_center/'
languages = ['de', 'en-us']

class ApiClient
  def initialize(base_url)
    @base_url = base_url
    @http = {} # map from hostname:port to HTTP object
  end

  def http(uri)
    key = [uri.hostname, uri.port].join(':')
    http = @http[key]
    if http == nil
      warn "Creating new HTTP object for #{key}"
      http = Net::HTTP.start(uri.hostname, uri.port, use_ssl: true)
      @http[key] = http
    end
    return http
  end

  def finish
    @http.each do |key, http|
      http.finish()
    end
  end

  def download_unless_cached(url, local_file)
    if File.exist? local_file
      warn "Using cached #{local_file}"
    else
      warn "Downloading #{local_file}"
      download_file(url, local_file)
    end
  end

  def download_file(url, filename, limit=10)
    if limit == 0
      raise "Too many redirects: #{url}"
    end
    uri = URI(url)
    req = Net::HTTP::Get.new(uri)
    #req.basic_auth(@user, @password)
    response = http(uri).request(req)
    case response
    when Net::HTTPSuccess
      File.open(filename, 'w') do |file|
        file.write(response.body)
      end
    when Net::HTTPRedirection
      download_file(response['Location'], filename, limit - 1)
    else
      raise "Could not get #{url}: #{response.inspect}"
    end
  end

  def download_data(language)
    ['categories', 'sections', 'articles'].each do |kind|
      download(kind, language)
    end
    download_attachment_data(language)
  end

  def download(kind, language)
    url = @base_url + language + '/' + kind + '.json'

    i = 1
    # Results are paginated
    while url
      local_file = "json/%s/%s-%03d.json" % [language, kind, i]
      download_unless_cached(url, local_file)
      data = JSON.parse(File.read(local_file))
      url = data['next_page']
      i = i + 1
    end
  end

  def download_attachment_data(language)
    each_object('articles', language) do |article|
      aid = article['id'].to_s
      url = @base_url + language + '/articles/' + aid + '/attachments.json'
      local_file = "json/#{language}/article_attachments-#{aid}.json"
      download_unless_cached(url, local_file)
    end
  end

  def download_attachments(language)
    each_object('article_attachments', language) do |attachment|
      url = attachment['content_url']
      local_file = 'docs/attachments/%s-%s' % [attachment['article_id'], attachment['file_name']]
      download_unless_cached(url, local_file)
    end
  end

  def each_object(kind, language)
    each_json_file(kind, language) do |file|
      data = JSON.parse(File.read(file))
      data[kind].each do |obj|
        yield(obj)
      end
    end
  end

  def each_json_file(kind, language)
    Find.find("json/#{language}") do |file|
      if file =~ /#{kind}-\d+\.json/
        yield(file)
      end
    end
  end
end

class HtmlExporter
  def initialize(api_client, languages)
    @languages = languages
    @api_client = api_client
    collect_attachments()
    @translation = {
      attachments: {'de' => 'AnhÃ¤nge', 'en-us' => 'Attachments'},
      eblockerhelp: {'de' => 'eBlocker Hilfe', 'en-us' => 'eBlocker Help'},
      language: {'de' => 'Deutsch', 'en-us' => 'English'}
    }
  end

  # Collect attachments that are not inline images
  def collect_attachments()
    # map: language -> article ID -> list of attachments
    @attachments = {}
    @languages.each do |language|
      @attachments[language] = Hash.new{|h, k| h[k] = []}
      @api_client.each_object('article_attachments', language) do |attachment|
        if !attachment['inline']
          @attachments[language][attachment['article_id']] << attachment
        end
      end
    end
  end

  def translate(key, language)
    entry = @translation[key]
    if entry == nil
      raise "Could not find translation for key :#{key}"
    end
    text = entry[language]
    if text == nil
      raise "Could not find translation in language '#{language}' for key :#{key}"
    end
    text
  end

  # provide links to other translations (of the current article, section, category):
  def translations(current_language, href)
    links = @languages.map do |language|
      name = translate(:language, language)
      if language == current_language
        name
      else
        '<a href="%s">%s</a>' % ["../#{language}/#{href}", name]
      end
    end
    return "<p>" + links.join(' | ') + "</p>"
  end

  def sort_by_position(items)
    items.sort do |a, b|
      a['position'].to_i <=> b['position'].to_i
    end
  end

  def write_html(filename, html)
    File.open(filename, 'w') do |file|
      file.puts('<html>')
      file.puts('<meta charset="utf-8">')
      file.puts(html)
      file.puts('</html>')
    end
    warn "Wrote #{filename}"
  end

  def navigation(navi)
    return "<p>" + navi.map{|n| "<a href=\"#{n[1]}\">#{n[0]}</a>"}.join(' &gt; ') + "</p>"
  end

  def export_html()
    template = ERB.new <<EOF
<body>
<h1><%= translate(:eblockerhelp, 'de') %> / <%= translate(:eblockerhelp, 'en-us') %></h1>
<ul>
<li><a href="de/index.html"><%= translate(:language, 'de') %></a></li>
<li><a href="en-us/index.html"><%= translate(:language, 'en-us') %></a></li>
</ul>
</body>
EOF
    write_html('docs/index.html', template.result(binding))
    @languages.each do |language|
      export_html_lang(language)
    end
  end

  def export_html_lang(language)
    categories = []
    @api_client.each_object('categories', language) {|category| categories << category}
    categories = sort_by_position(categories)

    navi = [[translate(:eblockerhelp, language), 'index.html']]

    template = ERB.new <<EOF
<body>
<%= translations(language, 'index.html') %>
<%= navigation(navi) %>
<h1><%= translate(:eblockerhelp, language) %></h1>
<ul>
<% categories.each do |category| %>
<li><a href="<%= category['id'] %>.html"><%= category['name'] %></a></li>
<% end %>
</ul>
</body>
EOF
    write_html("docs/#{language}/index.html", template.result(binding))
    categories.each do |category|
      export_sections(category, language, navi)
    end
  end

  def export_sections(category, language, navi)
    sections = []
    @api_client.each_object('sections', language) do |section|
      if section['category_id'] == category['id']
        sections << section
      end
    end
    sections = sort_by_position(sections)

    filename = "#{category['id']}.html"
    navi += [[category['name'], filename]]

    template = ERB.new <<EOF
<body>
<%= translations(language, filename) %>
<%= navigation(navi) %>
<h1><%= category['name'] %></h1>
<ul>
<% sections.each do |section| %>
<li><a href="<%= section['id'] %>.html"><%= section['name'] %></a></li>
<% end %>
</ul>
</body>
EOF
    write_html("docs/#{language}/#{filename}", template.result(binding))
    sections.each do |section|
      export_articles(section, language, navi)
    end
  end

  def export_articles(section, language, navi)
    articles = []
    @api_client.each_object('articles', language) do |article|
      if article['section_id'] == section['id']
        articles << article
      end
    end
    articles = sort_by_position(articles)

    filename = "#{section['id']}.html"
    navi += [[section['name'], filename]]

    template = ERB.new <<EOF
<body>
<%= translations(language, filename) %>
<%= navigation(navi) %>
<h1><%= section['name'] %></h1>
<ul>
<% articles.each do |article| %>
<li><a href="<%= article['id'] %>.html"><%= article['name'] %></a></li>
<% end %>
</ul>
</body>
EOF
    write_html("docs/#{language}/#{filename}", template.result(binding))
    articles.each do |article|
      export_article(article, language, navi)
    end
  end

  def export_article(article, language, navi)
    body = process_body(article)
    attachments = @attachments[language][article['id']].map do |attachment|
      {
        name: attachment['file_name'],
        url: process_url(article, attachment['content_url'])
      }
    end
    filename = "#{article['id']}.html"
    template = ERB.new(<<EOF, nil, '-')
<body>
<%= translations(language, filename) %>
<%= navigation(navi) %>
<h1><%= article['title'] %></h1>
<%= body %>
<% if attachments.size > 0 -%>
<h2><%= translate(:attachments, language) %></h2>
<ul>
<%   attachments.each do |attachment| -%>
<li><a target="_blank" href="<%= attachment[:url] %>"><%= attachment[:name] %></a></li>
<%   end -%>
</ul>
<% end -%>
</body>
EOF
    write_html("docs/#{language}/#{filename}", template.result(binding))
  end

  def process_url(article, url)
    # Attachments (images):
    if url =~ Regexp.new('^https://(support.eblocker.com|eblocker.zendesk.com)/hc/article_attachments/\\d+/(.+)$')
      return "../attachments/#{article['id']}-#$2"
    end

    # Links to other articles/categories/sections:
    if url =~ Regexp.new('^https://(support.eblocker.com|eblocker.zendesk.com)/hc/[a-z\\-]+/(articles|categories|sections)/(\\d+)')
      return "#$3.html"
    end

    warn "Unhandled URL: #{url}"
    return url
  end

  def process_body(article)
    body = article['body']
    body.gsub!(Regexp.new('\\b(https?://[0-9a-zA-Z_\\-\\./%]+)')) do |url|
      process_url(article, $1)
    end
    return body
  end
end


client = ApiClient.new(base_url)
languages.each do |language|
  client.download_data(language)
  client.download_attachments(language)
end
client.finish()

exporter = HtmlExporter.new(client, languages)
exporter.export_html()

